<!DOCTYPE html>
<html lang="uk">

<head>
    <%- include("./partials/head", {title: "Аналітика тренувань та харчування" }) %>
        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/luxon@3.0.1"></script>
        <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-luxon@1.2.0"></script>
</head>

<body class="analyze">
    <%- include("./partials/userbar") %>
        <%- include("./partials/header", { active: 8}) %>

            <div class="container my-5">
                <h1 class="mb-4">Щоденна аналітика ваших тренувань та харчування</h1>

                <div class="row mb-3">
                    <div class="col-md-12">
                        <select id="period-select" class="form-select">
                            <option value="day">Сьогодні</option>
                            <option value="week" selected>Останній тиждень</option>
                            <option value="month">Останній місяць</option>
                            <option value="all">Весь період</option>
                        </select>
                    </div>
                </div>

                <div class="row mb-4">
                    <div class="col-md-6">
                        <div class="card">
                            <div class="card-header">
                                <h5>Споживання КБЖВ</h5>
                            </div>
                            <div class="card-body">
                                <canvas id="nutrition-chart" height="250"></canvas>
                                <div class="mt-3" id="nutrition-summary"></div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="card">
                            <div class="card-header">
                                <h5>Баланс калорій</h5>
                            </div>
                            <div class="card-body">
                                <canvas id="calories-chart" height="250"></canvas>
                                <div class="mt-3" id="calories-summary"></div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row mb-4">
                    <div class="col-md-12">
                        <div class="card">
                            <div class="card-header">
                                <h5>Частота та тривалість тренувань</h5>
                            </div>
                            <div class="card-body">
                                <canvas id="frequency-chart" height="150"></canvas>
                                <div class="mt-3" id="frequency-summary"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <script>
                document.addEventListener('DOMContentLoaded', function () {
                    const utils = {
                        showAlert(type, message) {
                            const alertDiv = document.createElement('div');
                            alertDiv.className = `alert alert-${type} fixed-top mx-auto mt-3`;
                            alertDiv.style.maxWidth = '500px';
                            alertDiv.style.zIndex = '1060';
                            alertDiv.textContent = message;

                            document.body.appendChild(alertDiv);
                            setTimeout(() => alertDiv.remove(), 5000);
                        },

                        durationToMinutes(duration) {
                            if (!duration) return 0;
                            if (typeof duration === 'number') return duration;

                            if (typeof duration === 'string') {
                                // Формат "HH:MM"
                                if (duration.includes(':')) {
                                    const [hours, minutes] = duration.split(':').map(Number);
                                    return hours * 60 + (minutes || 0);
                                }
                                // Формат "X год Y хв"
                                const hoursMatch = duration.match(/(\d+)\s*год/i);
                                const minsMatch = duration.match(/(\d+)\s*хв/i);
                                const hours = hoursMatch ? parseInt(hoursMatch[1]) : 0;
                                const minutes = minsMatch ? parseInt(minsMatch[1]) : 0;
                                return hours * 60 + minutes;
                            }

                            return 0;
                        },

                        parseCalories(calories) {
                            if (typeof calories === 'number') return calories;
                            if (typeof calories === 'string') {
                                const match = calories.match(/\d+/);
                                return match ? parseInt(match[0]) : 0;
                            }
                            return 0;
                        },

                        formatDuration(minutes) {
                            const hrs = Math.floor(minutes / 60);
                            const mins = Math.round(minutes % 60);
                            return `${hrs > 0 ? hrs + ' год ' : ''}${mins} хв`;
                        }
                    };

                    const apiService = {
                        async getPlanHistory() {
                            try {
                                const response = await fetch('/api/analytics/history', {
                                    headers: {
                                        'Authorization': `Bearer ${localStorage.getItem('token')}`
                                    }
                                });

                                if (!response.ok) {
                                    const errorData = await response.json().catch(() => ({}));
                                    throw new Error(
                                        errorData.message ||
                                        `HTTP error! status: ${response.status}`
                                    );
                                }

                                const data = await response.json();

                                // Нормалізація даних
                                return {
                                    exercise: Array.isArray(data.exercise) ? data.exercise : [],
                                    diet: Array.isArray(data.diet) ? data.diet : []
                                };

                            } catch (error) {
                                console.error('API Error:', error);
                                return {
                                    exercise: [],
                                    diet: [],
                                    error: error.message
                                };
                            }
                        }
                    };

                    const dataService = {
                        async getData() {
                            try {
                                const history = await apiService.getPlanHistory();

                                // Обробка тренувань
                                const workouts = history.exercise.flatMap(item => {
                                    return item.data.map(workout => ({
                                        ...workout,
                                        date: item.saved_at,
                                        duration: utils.durationToMinutes(workout.time || workout.duration),
                                        calories: utils.parseCalories(workout.calories || workout.energy)
                                    }));
                                });

                                // Обробка харчування
                                const meals = history.diet.flatMap(item => {
                                    console.log('Обробка запису харчування:', {
                                        saved_at: item.saved_at,
                                        is_valid_date: luxon.DateTime.fromISO(item.saved_at).isValid,
                                        luxon_parsed: luxon.DateTime.fromISO(item.saved_at).toString()
                                    });
                                    return item.data.map(meal => ({
                                        ...meal,
                                        date: item.saved_at,
                                        protein: meal.protein || meal.macros?.protein || 0,
                                        fat: meal.fat || meal.macros?.fat || 0,
                                        carbs: meal.carbs || meal.macros?.carbs || 0,
                                        calories: meal.calories || meal.energy || meal.macros?.calories || 0
                                    }));
                                });

                                return { workouts, meals };
                            } catch (e) {
                                console.error("Помилка при отриманні даних:", e);
                                return { workouts: [], meals: [] };
                            }
                        },

                        groupByDay(data) {
                            const groups = {};
                            data.forEach(item => {
                                try {
                                    const date = luxon.DateTime.fromISO(item.date).toISODate();
                                    if (!date) return;

                                    if (!groups[date]) groups[date] = [];
                                    groups[date].push(item);
                                } catch (e) {
                                    console.error('Помилка обробки дати:', e);
                                }
                            });
                            return groups;
                        },

                        getDateRange(period) {
                            const now = luxon.DateTime.now();
                            let startDate;

                            switch (period) {
                                case 'day':
                                    startDate = now.startOf('day');
                                    break;
                                case 'week':
                                    startDate = now.minus({ days: 6 }).startOf('day');
                                    break;
                                case 'month':
                                    startDate = now.minus({ months: 1 }).startOf('day');
                                    break;
                                case 'all':
                                default:
                                    return { start: null, end: now.endOf('day') };
                            }

                            return { start: startDate, end: now.endOf('day') };
                        },

                        getAllDaysInRange(range) {
                            if (!range.start) return [];
                            const days = [];
                            let current = range.start;

                            while (current <= range.end) {
                                days.push(current.toISODate());
                                current = current.plus({ days: 1 });
                            }

                            return days;
                        },

                        filterByDateRange(data, range) {
                            if (!range.start) return data;
                            return data.filter(item => {
                                try {
                                    const itemDate = luxon.DateTime.fromISO(item.date);
                                    return itemDate >= range.start;
                                } catch (e) {
                                    return false;
                                }
                            });
                        }
                    };

                    const chartService = {
                        charts: {},

                        initNutritionChart(canvasId, labels, nutritionData) {
                            const ctx = document.getElementById(canvasId).getContext('2d');

                            if (this.charts.nutrition) this.charts.nutrition.destroy();

                            this.charts.nutrition = new Chart(ctx, {
                                type: 'bar',
                                data: {
                                    labels: labels,
                                    datasets: [
                                        {
                                            label: 'Білки (г)',
                                            data: nutritionData.proteins,
                                            backgroundColor: 'rgba(54, 162, 235, 0.7)'
                                        },
                                        {
                                            label: 'Жири (г)',
                                            data: nutritionData.fats,
                                            backgroundColor: 'rgba(255, 99, 132, 0.7)'
                                        },
                                        {
                                            label: 'Вуглеводи (г)',
                                            data: nutritionData.carbs,
                                            backgroundColor: 'rgba(75, 192, 192, 0.7)'
                                        }
                                    ]
                                },
                                options: {
                                    responsive: true,
                                    scales: {
                                        y: {
                                            beginAtZero: true
                                        }
                                    },
                                    plugins: {
                                        tooltip: {
                                            callbacks: {
                                                label: context => `${context.dataset.label}: ${context.raw.toFixed(1)}г`
                                            }
                                        }
                                    }
                                }
                            });
                        },

                        initCaloriesChart(canvasId, labels, nutritionData, workoutData) {
                            const ctx = document.getElementById(canvasId).getContext('2d');

                            if (this.charts.calories) this.charts.calories.destroy();

                            this.charts.calories = new Chart(ctx, {
                                type: 'line',
                                data: {
                                    labels: labels,
                                    datasets: [
                                        {
                                            label: 'Спожито калорій',
                                            data: nutritionData.calories,
                                            borderColor: 'rgba(255, 99, 132, 1)',
                                            backgroundColor: 'rgba(255, 99, 132, 0.1)',
                                            fill: true,
                                            tension: 0.3
                                        },
                                        {
                                            label: 'Спалено калорій',
                                            data: workoutData.caloriesBurned,
                                            borderColor: 'rgba(54, 162, 235, 1)',
                                            backgroundColor: 'rgba(54, 162, 235, 0.1)',
                                            fill: true,
                                            tension: 0.3
                                        },
                                        {
                                            label: 'Баланс',
                                            data: labels.map((_, i) => nutritionData.calories[i] - workoutData.caloriesBurned[i]),
                                            borderColor: 'rgba(75, 192, 192, 1)',
                                            borderWidth: 2,
                                            borderDash: [5, 5],
                                            fill: false,
                                            tension: 0.1
                                        }
                                    ]
                                },
                                options: {
                                    responsive: true,
                                    scales: {
                                        y: {
                                            beginAtZero: true
                                        }
                                    },
                                    plugins: {
                                        tooltip: {
                                            callbacks: {
                                                label: context => `${context.dataset.label}: ${context.raw.toFixed(0)} ккал`
                                            }
                                        }
                                    }
                                }
                            });
                        },

                        initFrequencyChart(canvasId, labels, workoutData) {
                            const ctx = document.getElementById(canvasId).getContext('2d');

                            if (this.charts.frequency) this.charts.frequency.destroy();

                            this.charts.frequency = new Chart(ctx, {
                                type: 'bar',
                                data: {
                                    labels: labels,
                                    datasets: [
                                        {
                                            label: 'Кількість тренувань',
                                            data: workoutData.count,
                                            backgroundColor: 'rgba(75, 192, 192, 0.7)',
                                            borderColor: 'rgba(75, 192, 192, 1)',
                                            borderWidth: 1,
                                            yAxisID: 'y'
                                        },
                                        {
                                            label: 'Тривалість (хв)',
                                            data: workoutData.durations,
                                            backgroundColor: 'rgba(153, 102, 255, 0.2)',
                                            borderColor: 'rgba(153, 102, 255, 1)',
                                            borderWidth: 2,
                                            type: 'line',
                                            tension: 0.3,
                                            yAxisID: 'y1'
                                        }
                                    ]
                                },
                                options: {
                                    responsive: true,
                                    interaction: {
                                        mode: 'index',
                                        intersect: false
                                    },
                                    scales: {
                                        y: {
                                            type: 'linear',
                                            display: true,
                                            position: 'left',
                                            title: {
                                                display: true,
                                                text: 'Кількість тренувань'
                                            },
                                            beginAtZero: true
                                        },
                                        y1: {
                                            type: 'linear',
                                            display: true,
                                            position: 'right',
                                            title: {
                                                display: true,
                                                text: 'Тривалість (хвилини)'
                                            },
                                            beginAtZero: true,
                                            grid: {
                                                drawOnChartArea: false
                                            }
                                        }
                                    },
                                    plugins: {
                                        tooltip: {
                                            callbacks: {
                                                label: context => {
                                                    let label = context.dataset.label || '';
                                                    if (label) label += ': ';
                                                    if (context.dataset.yAxisID === 'y1') {
                                                        return label + context.raw + ' хв';
                                                    }
                                                    return label + context.raw;
                                                }
                                            }
                                        }
                                    }
                                }
                            });
                        },

                        destroyAllCharts() {
                            Object.values(this.charts).forEach(chart => chart.destroy());
                            this.charts = {};
                        }
                    };

                    const summaryService = {
                        updateNutritionSummary(nutritionData, period) {
                            const avg = arr => {
                                const filtered = arr.filter(val => val > 0);
                                return filtered.length > 0 ?
                                    filtered.reduce((a, b) => a + b, 0) / filtered.length : 0;
                            };

                            const avgProtein = avg(nutritionData.proteins);
                            const avgFat = avg(nutritionData.fats);
                            const avgCarbs = avg(nutritionData.carbs);
                            const avgCalories = avg(nutritionData.calories);

                            const summaryEl = document.getElementById('nutrition-summary');
                            if (summaryEl) {
                                summaryEl.innerHTML = `
                                    <div class="alert alert-info">
                                        <h6>${period === 'day' ? 'Сьогоднішнє' : 'Середньодобове'} споживання:</h6>
                                        <p>Білки: ${avgProtein.toFixed(1)}г</p>
                                        <p>Жири: ${avgFat.toFixed(1)}г</p>
                                        <p>Вуглеводи: ${avgCarbs.toFixed(1)}г</p>
                                        <p>Калорії: ${avgCalories.toFixed(0)} ккал</p>
                                    </div>`;
                            }
                        },

                        updateCaloriesSummary(nutritionData, workoutData, period) {
                            const avg = arr => {
                                const filtered = arr.filter(val => val > 0);
                                return filtered.length > 0 ?
                                    filtered.reduce((a, b) => a + b, 0) / filtered.length : 0;
                            };

                            const avgCalories = avg(nutritionData.calories);
                            const avgBurned = avg(workoutData.caloriesBurned);
                            const balance = avgCalories - avgBurned;

                            const summaryEl = document.getElementById('calories-summary');
                            if (summaryEl) {
                                summaryEl.innerHTML = `
                                    <div class="alert alert-info">
                                        <h6>${period === 'day' ? 'Сьогоднішній' : 'Середньодобовий'} баланс:</h6>
                                        <p>Спожито: ${avgCalories.toFixed(0)} ккал</p>
                                        <p>Спалено: ${avgBurned.toFixed(0)} ккал</p>
                                        <p>Баланс: <span class="badge ${balance >= 0 ? 'bg-danger' : 'bg-success'}">
                                            ${balance >= 0 ? '+' : ''}${balance.toFixed(0)} ккал
                                        </span></p>
                                    </div>`;
                            }
                        },

                        updateFrequencySummary(workoutData, allDays, period) {
                            const sum = arr => arr.reduce((a, b) => a + b, 0);
                            const totalWorkouts = sum(workoutData.count);
                            const workoutDays = workoutData.count.filter(count => count > 0).length;
                            const totalDurationMinutes = sum(workoutData.durations);
                            const totalCaloriesBurned = sum(workoutData.caloriesBurned);

                            const summaryEl = document.getElementById('frequency-summary');
                            if (summaryEl) {
                                summaryEl.innerHTML = `
                                    <div class="alert alert-info">
                                        <h6>Статистика тренувань:</h6>
                                        <p>Кількість тренувань: ${totalWorkouts}</p>
                                        <p>Загальна тривалість: ${utils.formatDuration(totalDurationMinutes)}</p>
                                        <p>Спалено калорій: ${totalCaloriesBurned.toFixed(0)} ккал</p>
                                        ${period !== 'day' ? `<p>Днів з тренуваннями: ${workoutDays} з ${allDays.length}</p>` : ''}
                                    </div>`;
                            }
                        }
                    };

                    async function initCharts(period = 'week') {
                        try {
                            const { workouts, meals } = await dataService.getData();

                            if (workouts.length === 0 && meals.length === 0) {
                                utils.showAlert('warning', 'Немає даних для відображення');
                                return;
                            }

                            const dateRange = dataService.getDateRange(period);

                            const filteredWorkouts = dataService.filterByDateRange(workouts, dateRange);
                            const filteredMeals = dataService.filterByDateRange(meals, dateRange);

                            const workoutGroups = dataService.groupByDay(filteredWorkouts);
                            const mealGroups = dataService.groupByDay(filteredMeals);

                            let allDays;
                            if (period === 'all') {
                                const allDates = [...Object.keys(workoutGroups), ...Object.keys(mealGroups)].filter(d => d);
                                if (allDates.length > 0) {
                                    const minDate = luxon.DateTime.fromISO(allDates.sort()[0]).startOf('day');
                                    const maxDate = luxon.DateTime.fromISO(allDates.sort().reverse()[0]).endOf('day');
                                    allDays = dataService.getAllDaysInRange({ start: minDate, end: maxDate });
                                } else {
                                    allDays = [];
                                }
                            } else {
                                allDays = dataService.getAllDaysInRange(dateRange);
                            }

                            const displayDates = allDays.map(date => {
                                const dt = luxon.DateTime.fromISO(date);
                                if (!dt.isValid) return date;
                                return period === 'all' ? dt.toFormat('dd.MM.yyyy') : dt.toFormat('dd.MM');
                            });

                            // Підготовка даних для графіків
                            const nutritionData = {
                                proteins: allDays.map(day => {
                                    const meals = mealGroups[day] || [];
                                    return meals.reduce((sum, meal) => sum + (meal.protein || 0), 0);
                                }),
                                fats: allDays.map(day => {
                                    const meals = mealGroups[day] || [];
                                    return meals.reduce((sum, meal) => sum + (meal.fat || 0), 0);
                                }),
                                carbs: allDays.map(day => {
                                    const meals = mealGroups[day] || [];
                                    return meals.reduce((sum, meal) => sum + (meal.carbs || 0), 0);
                                }),
                                calories: allDays.map(day => {
                                    const meals = mealGroups[day] || [];
                                    return meals.reduce((sum, meal) => sum + (meal.calories || 0), 0);
                                })
                            };

                            const workoutData = {
                                caloriesBurned: allDays.map(day => {
                                    const workouts = workoutGroups[day] || [];
                                    return workouts.reduce((sum, workout) => sum + (workout.calories || 0), 0);
                                }),
                                durations: allDays.map(day => {
                                    const workouts = workoutGroups[day] || [];
                                    return workouts.reduce((sum, workout) => sum + (workout.duration || 0), 0);
                                }),
                                count: allDays.map(day => (workoutGroups[day] || []).length)
                            };

                            chartService.initNutritionChart('nutrition-chart', displayDates, nutritionData);
                            chartService.initCaloriesChart('calories-chart', displayDates, nutritionData, workoutData);
                            chartService.initFrequencyChart('frequency-chart', displayDates, workoutData);

                            summaryService.updateNutritionSummary(nutritionData, period);
                            summaryService.updateCaloriesSummary(nutritionData, workoutData, period);
                            summaryService.updateFrequencySummary(workoutData, allDays, period);

                        } catch (error) {
                            console.error('Помилка при ініціалізації графіків:', error);
                            utils.showAlert('danger', 'Не вдалося завантажити дані для аналітики');
                        }
                    }
                    initCharts('week');

                    document.getElementById('period-select')?.addEventListener('change', function () {
                        initCharts(this.value);
                    });
                });
            </script>
            <%- include('partials/footer') %>
</body>

</html>