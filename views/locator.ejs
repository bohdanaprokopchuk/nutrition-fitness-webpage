<!DOCTYPE html>
<html lang="uk">

<head>
    <%- include("./partials/head", { title: "–ú–∞–ø–∞ —Å–ø–æ—Ä—Ç–∑–∞–ª—ñ–≤" }) %>
</head>

<body>
    <%- include("./partials/userbar") %>
    <%- include("./partials/header", { active: 6 }) %>

    <div class="container">
        <h1>–ú–∞–ø–∞ —Å–ø–æ—Ä—Ç–∑–∞–ª—ñ–≤</h1>
        <div class="filter-bar">
            <input type="text" id="keyword" placeholder="–ù–∞–∑–≤–∞, –º—ñ—Å—Ç–æ –∞–±–æ –∞–¥—Ä–µ—Å–∞" style="flex: 2; min-width: 300px;">
            <input type="number" id="minRating" placeholder="–ú—ñ–Ω. —Ä–µ–π—Ç–∏–Ω–≥ (1‚Äì5)" step="0.1" min="0" max="5"
                style="min-width: 160px; flex: 1;">
            <button id="filterBtn">üîç –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏</button>
            <button id="nearMeBtn">üìç –ü–æ—Ä—É—á –∑—ñ –º–Ω–æ—é</button>
        </div>
        <div id="map"></div>
    </div>
    
    <script>
        let map;
        let markers = [];
        let service;
        let geocoder;

        function initMap() {
            const kyiv = { lat: 50.4501, lng: 30.5234 };
            map = new google.maps.Map(document.getElementById("map"), {
                center: kyiv,
                zoom: 13,
            });

            geocoder = new google.maps.Geocoder();
            service = new google.maps.places.PlacesService(map);

            searchPlaces(0);
        }

        function clearMarkers() {
            markers.forEach(marker => marker.setMap(null));
            markers = [];
        }

        function searchPlaces(minRating = 0, keyword = "—Å–ø–æ—Ä—Ç–∑–∞–ª") {
            clearMarkers();

            const request = {
                location: map.getCenter(),
                radius: 20000,
                type: "gym",
                keyword: keyword
            };

            service.nearbySearch(request, (results, status) => {
                if (status === google.maps.places.PlacesServiceStatus.OK && results) {
                    const filtered = results.filter(p => (p.rating || 0) >= minRating);
                    if (filtered.length === 0) {
                        alert("–ù–µ–º–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —ñ–∑ –∑–∞–¥–∞–Ω–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º.");
                    }
                    addMarkers(filtered);
                } else {
                    alert("–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –ø–æ–º–∏–ª–∫–∞: " + status);
                }
            });
        }

        function searchByText(query, location, minRating = 0) {
            clearMarkers();

            const request = {
                location: location,
                radius: 20000,
                query: query,
                type: "gym"
            };

            service.textSearch(request, (results, status) => {
                if (status === google.maps.places.PlacesServiceStatus.OK && results) {
                    const filtered = results.filter(p => (p.rating || 0) >= minRating);
                    if (filtered.length === 0) {
                        alert("–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ –Ω–∞–∑–≤–æ—é –∞–±–æ —Ä–µ–π—Ç–∏–Ω–≥–æ–º.");
                    }
                    addMarkers(filtered);
                } else {
                    alert("–ü–æ—à—É–∫ –∑–∞ —Ç–µ–∫—Å—Ç–æ–º –Ω–µ –¥–∞–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤: " + status);
                }
            });
        }

        function geocodeAndSearch(query, minRating = 0) {
            if (!query) {
                searchPlaces(minRating);
                return;
            }

            geocoder.geocode({ address: query }, (results, status) => {
                if (status === "OK" && results[0]) {
                    const location = results[0].geometry.location;
                    map.setCenter(location);
                    map.setZoom(14);
                    searchByText(query, location, minRating);
                } else {
                    // –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≥–µ–æ–∫–æ–¥—É–≤–∞—Ç–∏ ‚Äî —à—É–∫–∞—î–º–æ —è–∫ –Ω–∞–∑–≤—É —Å–ø–æ—Ä—Ç–∑–∞–ª—É
                    searchByText(query, map.getCenter(), minRating);
                }
            });
        }

        function findNearbyGyms(minRating = 0) {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(
                    (position) => {
                        const userLocation = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
                        map.setCenter(userLocation);
                        map.setZoom(14);
                        searchPlaces(minRating);
                    },
                    () => alert("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è.")
                );
            } else {
                alert("–ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –≤–∞—à–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º.");
            }
        }

        function addMarkers(places) {
            places.forEach(place => {
                const marker = new google.maps.Marker({
                    map,
                    position: place.geometry.location,
                    title: place.name,
                });

                const infoWindow = new google.maps.InfoWindow({
                    content: `
                <div style="max-width: 400px;">
                  <strong>${place.name}</strong><br>
                  <span>${place.formatted_address || place.vicinity || "–ê–¥—Ä–µ—Å–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"}</span><br>
                  –†–µ–π—Ç–∏–Ω–≥: ${place.rating ?? "–ù–µ–º–∞—î"}
                </div>
              `
                });

                marker.addListener("click", () => {
                    infoWindow.open(map, marker);
                });

                markers.push(marker);
            });
        }

        document.addEventListener("DOMContentLoaded", () => {
            document.getElementById("filterBtn").addEventListener("click", () => {
                const keyword = document.getElementById("keyword").value.trim();
                const minRating = parseFloat(document.getElementById("minRating").value) || 0;
                geocodeAndSearch(keyword, minRating);
            });

            document.getElementById("nearMeBtn").addEventListener("click", () => {
                const minRating = parseFloat(document.getElementById("minRating").value) || 0;
                findNearbyGyms(minRating);
            });
        });

        window.initMap = initMap;
    </script>

    <script async defer
        src="https://maps.googleapis.com/maps/api/js?key=<%= apiKey %>&libraries=places,geometry&callback=initMap">
    </script>


<%- include("./partials/footer") %>
</body>
</html>